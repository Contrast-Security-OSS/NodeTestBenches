// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`getSinkData returns the expected array of SinkData objects for each input 1`] = `
Array [
  Object {
    "input": "query",
    "key": "query",
    "method": "get",
    "name": "rule",
    "params": Array [
      "input",
      "second_input",
    ],
    "sinks": Object {
      "noop": [Function],
      "safe": [Function],
      "unsafe": [Function],
    },
    "uri": "/query/rule",
    "url": "/rule/query/rule",
    "urlWithoutParams": "/rule/query/rule",
  },
  Object {
    "input": "params",
    "key": "params",
    "method": "get",
    "name": "rule",
    "params": Array [
      "input",
      "second_input",
    ],
    "sinks": Object {
      "noop": [Function],
      "safe": [Function],
      "unsafe": [Function],
    },
    "uri": "/params/rule/:input",
    "url": "/rule/params/rule/:input",
    "urlWithoutParams": "/rule/params/rule",
  },
  Object {
    "input": "body",
    "key": "body",
    "method": "post",
    "name": "rule",
    "params": Array [
      "input",
      "second_input",
    ],
    "sinks": Object {
      "noop": [Function],
      "safe": [Function],
      "unsafe": [Function],
    },
    "uri": "/body/rule",
    "url": "/rule/body/rule",
    "urlWithoutParams": "/rule/body/rule",
  },
]
`;

exports[`getSinkData returns the expected array of SinkData objects for each sink 1`] = `
Array [
  Object {
    "input": "query",
    "key": "query",
    "method": "get",
    "name": "rule2",
    "params": Array [
      "input",
      "second_input",
    ],
    "sinks": Object {
      "noop": [MockFunction],
      "safe": [MockFunction],
      "safe2": [MockFunction],
      "unsafe": [MockFunction],
    },
    "uri": "/query/rule2",
    "url": "/rule2/query/rule2",
    "urlWithoutParams": "/rule2/query/rule2",
  },
  Object {
    "input": "params",
    "key": "params",
    "method": "get",
    "name": "rule2",
    "params": Array [
      "input",
      "second_input",
    ],
    "sinks": Object {
      "noop": [MockFunction],
      "safe": [MockFunction],
      "safe2": [MockFunction],
      "unsafe": [MockFunction],
    },
    "uri": "/params/rule2/:input",
    "url": "/rule2/params/rule2/:input",
    "urlWithoutParams": "/rule2/params/rule2",
  },
  Object {
    "input": "body",
    "key": "body",
    "method": "post",
    "name": "rule2",
    "params": Array [
      "input",
      "second_input",
    ],
    "sinks": Object {
      "noop": [MockFunction],
      "safe": [MockFunction],
      "safe2": [MockFunction],
      "unsafe": [MockFunction],
    },
    "uri": "/body/rule2",
    "url": "/rule2/body/rule2",
    "urlWithoutParams": "/rule2/body/rule2",
  },
]
`;

exports[`groupSinkData returns the expected grouped object 1`] = `
Object {
  "body": Array [
    Object {
      "input": "body",
      "key": "body",
      "method": "post",
      "name": "rule",
      "params": Array [
        "input",
        "second_input",
      ],
      "sinks": Object {
        "noop": [Function],
        "safe": [Function],
        "unsafe": [Function],
      },
      "uri": "/body/rule",
      "url": "/rule/body/rule",
      "urlWithoutParams": "/rule/body/rule",
    },
  ],
  "params": Array [
    Object {
      "input": "params",
      "key": "params",
      "method": "get",
      "name": "rule",
      "params": Array [
        "input",
        "second_input",
      ],
      "sinks": Object {
        "noop": [Function],
        "safe": [Function],
        "unsafe": [Function],
      },
      "uri": "/params/rule/:input",
      "url": "/rule/params/rule/:input",
      "urlWithoutParams": "/rule/params/rule",
    },
  ],
  "query": Array [
    Object {
      "input": "query",
      "key": "query",
      "method": "get",
      "name": "rule",
      "params": Array [
        "input",
        "second_input",
      ],
      "sinks": Object {
        "noop": [Function],
        "safe": [Function],
        "unsafe": [Function],
      },
      "uri": "/query/rule",
      "url": "/rule/query/rule",
      "urlWithoutParams": "/rule/query/rule",
    },
  ],
}
`;
