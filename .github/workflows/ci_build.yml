name: ECR Push

# This GitHub Action also builds ECR images with local version of test-bench-utils for integration testing
# The published ECR images have a custom tag with the number of PR. It can be used to manually test with the Screener

on:
  pull_request:
    types:
      - labeled
jobs:
  build-test-bench-utils:
    if: ${{ github.event.label.name == 'ci-test' }}
    runs-on: ubuntu-latest
    steps:
      - name: Clone repo
        uses: actions/checkout@v2
      - name: Set up Node v${{ matrix.version }}
        uses: actions/setup-node@v1
      - name: Build test-bench-utils
        run: |
          cd test-bench-utils
          mkdir artifacts
          npm pack
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: contrast-test-bench-utils.tgz
          path: test-bench-utils/contrast-test-bench-utils-*.tgz
  build-and-push:
    if: ${{ github.event.label.name == 'ci-test' }}
    needs:
      - build-test-bench-utils
    runs-on: ubuntu-latest
    strategy:
      matrix:
        apps: [express,fastify,fastify3,hapi18,hapi19,hapi20,koa,kraken,loopback,loopback4,restify,sails]
        version: [12, 14, 16]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Download test-bench-utils
        uses: actions/download-artifact@v2
        with:
          name: contrast-test-bench-utils.tgz
          path: ${{ matrix.apps }}/contrast-test-bench-utils.tgz
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image ${{ matrix.apps }} version ${{ matrix.version }} to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ matrix.apps }}
          IMAGE_TAG: ${{ github.sha }}
          NODE_VERSION: ${{ matrix.version }}
        run: |
          cd $ECR_REPOSITORY
          ../scripts/copy_scripts.sh
          pr_number=$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG-$NODE_VERSION -t $ECR_REGISTRY/$ECR_REPOSITORY:$pr_number-$NODE_VERSION --build-arg node_version=$NODE_VERSION .
          docker push -a $ECR_REGISTRY/$ECR_REPOSITORY
