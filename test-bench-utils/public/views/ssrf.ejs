<style type="text/css">
 .btn.active:focus {
   outline: none;
 }
 ul.selections {
   font-family: monospace;
   overflow: auto;
   list-style-type: none;
   padding: 0;
 }
 li[id*=-selection] {
   margin: 2px 2px 5px;
   float: left;
   clear: none;
 }
</style>

<h1 class="page-header"><%= name %></h1>
<% include ../partials/ruleInfo.ejs %>
<div class="row">
  <div id="ssrf" class="col-xs-12 col-sm-6" style="padding-bottom: 30px;">
    <div style="overflow:auto">
      <p>Select library to use when performing the server-side request.</p>
      <ul id="libs-list" class="selections">
        <li id="axios-selection">
          <button type="submit" class="btn btn-warning">axios</button>
        </li>
        <li id="bent-selection">
          <button type="submit" class="btn btn-warning">bent</button>
        </li>
        <li id="fetch-selection">
          <button type="submit" class="btn btn-warning">fetch</button>
        </li>
        <li id="request-selection">
          <button type="submit" class="btn btn-warning">request</button>
        </li>
        <li id="superagent-selection">
          <button type="submit" class="btn btn-warning">superagent</button>
        </li>
      </ul>
    </div>

    <div style="overflow:auto">
      <p>Select part of url to contain tracked data.</p>
      <ul id="url-list" class="selections">
        <li id="host-selection">
          <button type="submit" class="btn btn-warning">host</button>
        </li>
        <li id="path-selection">
          <button type="submit" class="btn btn-warning">path</button>
        </li>
        <li id="query-selection">
          <button type="submit" class="btn btn-warning">query</button>
        </li>
      </ul>
    </div>
    <br>

    <div>
      <form action="/ssrf" method="GET" target="test-bench-ssrf">
        <p>The server will make a request to the following URL using the selected Node.js package.</p>
        <pre id="constructed-url"></pre>
        <br>
        <label>Input Value</label>
        <br>
        <input name="input" class="form-control">
        <br>
        <button type="submit" class="btn btn-primary">Submit</button>
      </form>
    </div>
  </div>
</div>

<script type="text/javascript">
 $(() => {
   const state = {
     action: '/ssrf/{lib}/{url}',
     requestUrl: '<%= requestUrl %>',
     selectedLib: 'axios',
     selectedUrlPart: 'host'
   };
   debugger;

   $('#constructed-url').text(state.requestUrl);

   $(`li[id='${state.selectedLib}-selection'] button`).toggleClass('active');
   $(`li[id='${state.selectedUrlPart}-selection'] button`).toggleClass('active');

   // set the initial value on load so it is not empty
   if (state.selectedUrlPart === 'path') {
    $('[name=input]').val(state.requestUrl.substring(7));
   }

   $('#url-list button')
     .on('click', (e) => {
       state.selectedUrlPart = $(e.target).text();
       toggleActiveSelection(e);
       setAction();
     });

   $('#libs-list button')
     .on('click', (e) => {
       state.selectedLib = $(e.target).text();
       toggleActiveSelection(e);
       setAction();
     });

   $('[name=input]').on('keyup', (e) => {
     const url = e.currentTarget.value
      ? state.selectedUrlPart === 'host'
      ? `http://${e.currentTarget.value}`
      : state.selectedUrlPart === 'path'
      ? `${state.requestUrl}/${e.currentTarget.value}`
      : `${state.requestUrl}?input=${e.currentTarget.value}`
      : `${state.requestUrl}`
     $('#constructed-url').text(url)
   });

   setAction();

   function setAction() {
     const action = state
       .action
       .replace('{lib}', state.selectedLib)
       .replace('{url}', state.selectedUrlPart);

     $('form').attr('action', action);
   }

   function toggleActiveSelection(e) {
     const target = $(e.target);
     target.addClass('active');
     target
       .parent()
       .siblings()
       .children('button')
       .removeClass('active')
   }
 });
</script>
