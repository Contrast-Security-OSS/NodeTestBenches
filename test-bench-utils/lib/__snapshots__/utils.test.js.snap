// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`getSinkData returns the expected array of SinkData objects for each input 1`] = `
Array [
  Object {
    "input": "query",
    "key": "query",
    "method": "get",
    "name": "rule",
    "params": Array [
      "input",
      "second_input",
    ],
    "safety": "safe",
    "sink": [Function],
    "uri": "/query/rule/safe",
    "url": "/rule/query/rule/safe",
    "urlWithoutParams": "/rule/query/rule",
  },
  Object {
    "input": "query",
    "key": "query",
    "method": "get",
    "name": "rule",
    "params": Array [
      "input",
      "second_input",
    ],
    "safety": "unsafe",
    "sink": [Function],
    "uri": "/query/rule/unsafe",
    "url": "/rule/query/rule/unsafe",
    "urlWithoutParams": "/rule/query/rule",
  },
  Object {
    "input": "query",
    "key": "query",
    "method": "get",
    "name": "rule",
    "params": Array [
      "input",
      "second_input",
    ],
    "safety": "noop",
    "sink": [Function],
    "uri": "/query/rule/noop",
    "url": "/rule/query/rule/noop",
    "urlWithoutParams": "/rule/query/rule",
  },
  Object {
    "input": "params",
    "key": "params",
    "method": "get",
    "name": "rule",
    "params": Array [
      "input",
      "second_input",
    ],
    "safety": "safe",
    "sink": [Function],
    "uri": "/params/rule/:input/safe",
    "url": "/rule/params/rule/:input/safe",
    "urlWithoutParams": "/rule/params/rule",
  },
  Object {
    "input": "params",
    "key": "params",
    "method": "get",
    "name": "rule",
    "params": Array [
      "input",
      "second_input",
    ],
    "safety": "unsafe",
    "sink": [Function],
    "uri": "/params/rule/:input/unsafe",
    "url": "/rule/params/rule/:input/unsafe",
    "urlWithoutParams": "/rule/params/rule",
  },
  Object {
    "input": "params",
    "key": "params",
    "method": "get",
    "name": "rule",
    "params": Array [
      "input",
      "second_input",
    ],
    "safety": "noop",
    "sink": [Function],
    "uri": "/params/rule/:input/noop",
    "url": "/rule/params/rule/:input/noop",
    "urlWithoutParams": "/rule/params/rule",
  },
  Object {
    "input": "body",
    "key": "body",
    "method": "post",
    "name": "rule",
    "params": Array [
      "input",
      "second_input",
    ],
    "safety": "safe",
    "sink": [Function],
    "uri": "/body/rule/safe",
    "url": "/rule/body/rule/safe",
    "urlWithoutParams": "/rule/body/rule",
  },
  Object {
    "input": "body",
    "key": "body",
    "method": "post",
    "name": "rule",
    "params": Array [
      "input",
      "second_input",
    ],
    "safety": "unsafe",
    "sink": [Function],
    "uri": "/body/rule/unsafe",
    "url": "/rule/body/rule/unsafe",
    "urlWithoutParams": "/rule/body/rule",
  },
  Object {
    "input": "body",
    "key": "body",
    "method": "post",
    "name": "rule",
    "params": Array [
      "input",
      "second_input",
    ],
    "safety": "noop",
    "sink": [Function],
    "uri": "/body/rule/noop",
    "url": "/rule/body/rule/noop",
    "urlWithoutParams": "/rule/body/rule",
  },
]
`;

exports[`getSinkData returns the expected array of SinkData objects for each sink 1`] = `
Array [
  Object {
    "input": "query",
    "key": "query",
    "method": "get",
    "name": "rule2",
    "params": Array [
      "input",
      "second_input",
    ],
    "safety": "noop",
    "sink": [MockFunction],
    "uri": "/query/rule2/noop",
    "url": "/rule2/query/rule2/noop",
    "urlWithoutParams": "/rule2/query/rule2",
  },
  Object {
    "input": "query",
    "key": "query",
    "method": "get",
    "name": "rule2",
    "params": Array [
      "input",
      "second_input",
    ],
    "safety": "unsafe",
    "sink": [MockFunction],
    "uri": "/query/rule2/unsafe",
    "url": "/rule2/query/rule2/unsafe",
    "urlWithoutParams": "/rule2/query/rule2",
  },
  Object {
    "input": "query",
    "key": "query",
    "method": "get",
    "name": "rule2",
    "params": Array [
      "input",
      "second_input",
    ],
    "safety": "safe",
    "sink": [MockFunction],
    "uri": "/query/rule2/safe",
    "url": "/rule2/query/rule2/safe",
    "urlWithoutParams": "/rule2/query/rule2",
  },
  Object {
    "input": "query",
    "key": "query",
    "method": "get",
    "name": "rule2",
    "params": Array [
      "input",
      "second_input",
    ],
    "safety": "safe2",
    "sink": [MockFunction],
    "uri": "/query/rule2/safe2",
    "url": "/rule2/query/rule2/safe2",
    "urlWithoutParams": "/rule2/query/rule2",
  },
  Object {
    "input": "params",
    "key": "params",
    "method": "get",
    "name": "rule2",
    "params": Array [
      "input",
      "second_input",
    ],
    "safety": "noop",
    "sink": [MockFunction],
    "uri": "/params/rule2/:input/noop",
    "url": "/rule2/params/rule2/:input/noop",
    "urlWithoutParams": "/rule2/params/rule2",
  },
  Object {
    "input": "params",
    "key": "params",
    "method": "get",
    "name": "rule2",
    "params": Array [
      "input",
      "second_input",
    ],
    "safety": "unsafe",
    "sink": [MockFunction],
    "uri": "/params/rule2/:input/unsafe",
    "url": "/rule2/params/rule2/:input/unsafe",
    "urlWithoutParams": "/rule2/params/rule2",
  },
  Object {
    "input": "params",
    "key": "params",
    "method": "get",
    "name": "rule2",
    "params": Array [
      "input",
      "second_input",
    ],
    "safety": "safe",
    "sink": [MockFunction],
    "uri": "/params/rule2/:input/safe",
    "url": "/rule2/params/rule2/:input/safe",
    "urlWithoutParams": "/rule2/params/rule2",
  },
  Object {
    "input": "params",
    "key": "params",
    "method": "get",
    "name": "rule2",
    "params": Array [
      "input",
      "second_input",
    ],
    "safety": "safe2",
    "sink": [MockFunction],
    "uri": "/params/rule2/:input/safe2",
    "url": "/rule2/params/rule2/:input/safe2",
    "urlWithoutParams": "/rule2/params/rule2",
  },
  Object {
    "input": "body",
    "key": "body",
    "method": "post",
    "name": "rule2",
    "params": Array [
      "input",
      "second_input",
    ],
    "safety": "noop",
    "sink": [MockFunction],
    "uri": "/body/rule2/noop",
    "url": "/rule2/body/rule2/noop",
    "urlWithoutParams": "/rule2/body/rule2",
  },
  Object {
    "input": "body",
    "key": "body",
    "method": "post",
    "name": "rule2",
    "params": Array [
      "input",
      "second_input",
    ],
    "safety": "unsafe",
    "sink": [MockFunction],
    "uri": "/body/rule2/unsafe",
    "url": "/rule2/body/rule2/unsafe",
    "urlWithoutParams": "/rule2/body/rule2",
  },
  Object {
    "input": "body",
    "key": "body",
    "method": "post",
    "name": "rule2",
    "params": Array [
      "input",
      "second_input",
    ],
    "safety": "safe",
    "sink": [MockFunction],
    "uri": "/body/rule2/safe",
    "url": "/rule2/body/rule2/safe",
    "urlWithoutParams": "/rule2/body/rule2",
  },
  Object {
    "input": "body",
    "key": "body",
    "method": "post",
    "name": "rule2",
    "params": Array [
      "input",
      "second_input",
    ],
    "safety": "safe2",
    "sink": [MockFunction],
    "uri": "/body/rule2/safe2",
    "url": "/rule2/body/rule2/safe2",
    "urlWithoutParams": "/rule2/body/rule2",
  },
]
`;

exports[`groupSinkData returns the expected grouped object 1`] = `
Object {
  "body": Array [
    Object {
      "input": "body",
      "key": "body",
      "method": "post",
      "name": "rule",
      "params": Array [
        "input",
        "second_input",
      ],
      "safety": "safe",
      "sink": [Function],
      "uri": "/body/rule/safe",
      "url": "/rule/body/rule/safe",
      "urlWithoutParams": "/rule/body/rule",
    },
    Object {
      "input": "body",
      "key": "body",
      "method": "post",
      "name": "rule",
      "params": Array [
        "input",
        "second_input",
      ],
      "safety": "unsafe",
      "sink": [Function],
      "uri": "/body/rule/unsafe",
      "url": "/rule/body/rule/unsafe",
      "urlWithoutParams": "/rule/body/rule",
    },
    Object {
      "input": "body",
      "key": "body",
      "method": "post",
      "name": "rule",
      "params": Array [
        "input",
        "second_input",
      ],
      "safety": "noop",
      "sink": [Function],
      "uri": "/body/rule/noop",
      "url": "/rule/body/rule/noop",
      "urlWithoutParams": "/rule/body/rule",
    },
  ],
  "params": Array [
    Object {
      "input": "params",
      "key": "params",
      "method": "get",
      "name": "rule",
      "params": Array [
        "input",
        "second_input",
      ],
      "safety": "safe",
      "sink": [Function],
      "uri": "/params/rule/:input/safe",
      "url": "/rule/params/rule/:input/safe",
      "urlWithoutParams": "/rule/params/rule",
    },
    Object {
      "input": "params",
      "key": "params",
      "method": "get",
      "name": "rule",
      "params": Array [
        "input",
        "second_input",
      ],
      "safety": "unsafe",
      "sink": [Function],
      "uri": "/params/rule/:input/unsafe",
      "url": "/rule/params/rule/:input/unsafe",
      "urlWithoutParams": "/rule/params/rule",
    },
    Object {
      "input": "params",
      "key": "params",
      "method": "get",
      "name": "rule",
      "params": Array [
        "input",
        "second_input",
      ],
      "safety": "noop",
      "sink": [Function],
      "uri": "/params/rule/:input/noop",
      "url": "/rule/params/rule/:input/noop",
      "urlWithoutParams": "/rule/params/rule",
    },
  ],
  "query": Array [
    Object {
      "input": "query",
      "key": "query",
      "method": "get",
      "name": "rule",
      "params": Array [
        "input",
        "second_input",
      ],
      "safety": "safe",
      "sink": [Function],
      "uri": "/query/rule/safe",
      "url": "/rule/query/rule/safe",
      "urlWithoutParams": "/rule/query/rule",
    },
    Object {
      "input": "query",
      "key": "query",
      "method": "get",
      "name": "rule",
      "params": Array [
        "input",
        "second_input",
      ],
      "safety": "unsafe",
      "sink": [Function],
      "uri": "/query/rule/unsafe",
      "url": "/rule/query/rule/unsafe",
      "urlWithoutParams": "/rule/query/rule",
    },
    Object {
      "input": "query",
      "key": "query",
      "method": "get",
      "name": "rule",
      "params": Array [
        "input",
        "second_input",
      ],
      "safety": "noop",
      "sink": [Function],
      "uri": "/query/rule/noop",
      "url": "/rule/query/rule/noop",
      "urlWithoutParams": "/rule/query/rule",
    },
  ],
}
`;
